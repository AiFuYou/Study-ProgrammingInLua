--练习10.1：请编写一个函数split，该函数接收两个参数，第1个参数是字符串，第2个参数是分隔符模式，
--函数的返回值是分隔符分割后的原始字符串中的每一部分的序列：
--t = split("a whole new world", " ")
--t = {"a", "whole", "new", "world")
--你编写的函数是如何处理空字符串的呢？特别是，一个空字符串究竟是空序列(an empty sequence)，
--还是一个具有字符串的序列呢（a sequence with one empty string）？



--练习10.2：模式'%D'和'[^%d]'是等价的，那么模式'[^%d%u]'和'[%D%U]'呢？

--练习10.3：请编写一个函数transliterate，该函数接受两个参数，第1个参数是字符串，第二个参数是一个表。
--函数transliterate根据第2个参数中的表使用一个字符替换字符串中的字符。如果表中将a映射为b，那么该函数将所有a替换为b。
--如果表中将a映射为false，那么该函数则把结果中的所有a移除。

--练习10.4：在10.3节的最后，我们定义了一个trim函数。由于该函数使用了回溯，所以对于某些字符串来说该函数的时间复杂度是O(n^2)。
--例如：在笔者的新机器上，针对一个100KB大小字符串的匹配可能会耗费52秒。
--●构造一个可能会导致函数trim耗费O(n^2)时间复杂度的字符串。
--●重写这个函数使得其时间复杂度为O(n)。

--练习10.5：请使用转义序列\x编写一个函数，将一个二进制字符串格式转化为Lua语言中的字符串常量：
--print(escape("\0\1hello\200"))
--> \x00\x01\x68\x65\x6C\x6C\x6F\xC8
--作为优化，请同时使用转义序列\z打破较长的行。

--练习10.6：请为UTF-8字符重写函数transliterate。

--练习10.7请编写一个函数，该函数用于逆转一个UTF-8字符串。